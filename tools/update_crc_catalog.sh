if [ $# -lt 1 ]; then
    echo "Usage: $0 /path/git/zig"
    exit 1
fi

filepath=$1/lib/std/hash/crc/catalog.zig

cat <<EOS >$filepath
//! This file is auto-generated by tools/update_crc_catalog.sh.

const std = @import("../../std.zig");
const testing = std.testing;
const crc = @import("../crc.zig");
const Algorithm = crc.Algorithm;
const Crc = crc.Crc;
EOS

curl -s https://reveng.sourceforge.io/crc-catalogue/all.htm | grep -o 'width.*name.*"' | while read -r line; do
    width=$(echo $line | sed 's/width=\([0-9]*\) \(.*\) name="\(.*\)"/\1/')
    params=$(echo $line | sed 's/width=\([0-9]*\) \(.*\) name="\(.*\)"/\2/' | sed 's/ /, ./g' | sed 's/=/ = /g')
    name=$(echo $line | sed 's/width=\([0-9]*\) \(.*\) name="\(.*\)"/\3/')
    snakecase=$(echo $name | sed 's/[-\/]/_/g' | tr '[:upper:]' '[:lower:]')
    camelcase=$(echo $snakecase | perl -pe 's/(^|_)(\w)/\U$2/g')

    cat <<EOS >>$filepath

const $snakecase: Algorithm(u$width) = .{ .$params };

pub const $camelcase = Crc(u$width, $snakecase);

test "$name" {
    try testing.expectEqual($snakecase.check, $camelcase.hash("123456789"));

    var c = $camelcase.init();
    c.update("1234");
    c.update("56789");
    try testing.expectEqual($snakecase.check, c.final());
}
EOS
done
